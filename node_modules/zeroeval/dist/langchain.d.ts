import { BaseCallbackHandler, BaseCallbackHandlerInput } from '@langchain/core/callbacks/base';
import { AgentAction, AgentFinish } from '@langchain/core/dist/agents';
import { DocumentInterface } from '@langchain/core/dist/documents/document';
import { Serialized } from '@langchain/core/dist/load/serializable';
import { BaseMessage } from '@langchain/core/dist/messages/base';
import { LLMResult, ChatResult } from '@langchain/core/dist/outputs';
import { ChainValues } from '@langchain/core/dist/utils/types';
import { RunnableConfig } from '@langchain/core/runnables';

interface ZeroEvalCallbackHandlerOptions {
    debug?: boolean;
    excludeMetadataProps?: RegExp;
    maxConcurrentSpans?: number;
    spanCleanupIntervalMs?: number;
}
declare class ZeroEvalCallbackHandler extends BaseCallbackHandler implements BaseCallbackHandlerInput {
    name: string;
    private spans;
    private rootRunId?;
    private options;
    private metadataPool;
    private cleanupTimer?;
    private spanStartTimes;
    private cachedRegex;
    private static readonly chooseFirst;
    constructor(options?: ZeroEvalCallbackHandlerOptions);
    private startCleanupTimer;
    private cleanupOrphanedSpans;
    protected startSpan({ runId, parentRunId, name, type, input, tags, metadata, }: {
        runId: string;
        parentRunId?: string;
        name: string;
        type?: string;
        input?: unknown;
        tags?: string[];
        metadata?: Record<string, unknown>;
    }): void;
    protected endSpan({ runId, output, error, tags, metadata, }: {
        runId: string;
        output?: unknown;
        error?: string;
        tags?: string[];
        metadata?: Record<string, unknown>;
    }): void;
    private beginTracerSegment;
    private finishTracerSegment;
    private deriveComponentName;
    handleLLMStart(llm: Serialized, prompts: string[], runId: string, parentRunId?: string, extraParams?: {
        options: RunnableConfig;
        invocation_params?: Record<string, unknown>;
        batch_size: number;
        cache?: boolean;
    }, tags?: string[], metadata?: Record<string, unknown>, runName?: string): Promise<void>;
    handleLLMError(err: Error, runId: string, parentRunId?: string, tags?: string[]): Promise<void>;
    handleLLMEnd(output: LLMResult | ChatResult, runId: string, parentRunId?: string, tags?: string[]): Promise<void>;
    handleChatModelStart(llm: Serialized, messages: BaseMessage[][], runId: string, parentRunId?: string, extraParams?: {
        options: RunnableConfig;
        invocation_params?: Record<string, unknown>;
        batch_size: number;
        cache?: boolean;
    }, tags?: string[], metadata?: Record<string, unknown>, runName?: string): Promise<void>;
    handleChainStart(chain: Serialized, inputs: ChainValues, runId: string, parentRunId?: string, tags?: string[], metadata?: Record<string, unknown>, runType?: string, runName?: string): Promise<void>;
    handleChainError(err: Error, runId: string, parentRunId?: string, tags?: string[], kwargs?: {
        inputs?: Record<string, unknown>;
    }): Promise<void>;
    handleChainEnd(outputs: ChainValues, runId: string, parentRunId?: string, tags?: string[], kwargs?: {
        inputs?: Record<string, unknown>;
    }): Promise<void>;
    handleToolStart(tool: Serialized, input: string, runId: string, parentRunId?: string, tags?: string[], metadata?: Record<string, unknown>, runName?: string): Promise<void>;
    handleToolError(err: Error, runId: string, parentRunId?: string, tags?: string[]): Promise<void>;
    handleToolEnd(output: unknown, runId: string, parentRunId?: string, tags?: string[]): Promise<void>;
    handleAgentAction(action: AgentAction, runId: string, parentRunId?: string, tags?: string[]): Promise<void>;
    handleAgentEnd(action: AgentFinish, runId: string, parentRunId?: string, tags?: string[]): Promise<void>;
    handleRetrieverStart(retriever: Serialized, query: string, runId: string, parentRunId?: string, tags?: string[], metadata?: Record<string, unknown>, name?: string): Promise<void>;
    handleRetrieverEnd(documents: DocumentInterface[], runId: string, parentRunId?: string, tags?: string[]): Promise<void>;
    handleRetrieverError(err: Error, runId: string, parentRunId?: string, tags?: string[]): Promise<void>;
    private normalizeCallParamsOptimized;
    private flattenGenerationsOptimized;
    private parseGenOptimized;
    private flattenMessagesInputOptimized;
    private extractMessageContentOptimized;
    private parseMaybeJsonOptimized;
    private normalizeToolOutputOptimized;
    private normalizeChainOutputsOptimized;
    private normalizeChainInputsOptimized;
    private parseChainElementOptimized;
    destroy(): void;
}

declare const setGlobalCallbackHandler: (handler: BaseCallbackHandler) => void;
declare const getGlobalHandler: () => BaseCallbackHandler | undefined;
declare const clearGlobalHandler: () => void;

export { ZeroEvalCallbackHandler, clearGlobalHandler, getGlobalHandler, setGlobalCallbackHandler };
